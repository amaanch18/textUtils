{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","aria-checked","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","joinedWord","split","reverse","join","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ad7cf170.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n                        </li>\n                        {/* <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                        </li> */}\n                    </ul>\n                    {/* <form className=\"d-flex\" role=\"search\">\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\n                    </form> */}\n                    <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" aria-checked role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n                    </div>\n\n                    {/* <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\n                    <input className=\"form-check-input\" aria-checked onClick={props.greenMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Green Mode</label>\n                    </div> */}\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title Here',\n    aboutText: 'About'\n}","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n    const handleUpClick =() => {\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to Upper Case!\", \"success\");\n    }\n    const handleLoClick =() => {\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to lower Case!\", \"success\");\n    }\n    const handleOnChange =(event) => {\n        setText(event.target.value);\n    }\n    const handleClearClick =(event) => {\n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n    const handleReverseClick =(event) => {\n        let splitWord = text.split(\"\");\n        let reverseWord = splitWord.reverse(\"\");\n        let joinedWord = reverseWord.join(\"\");\n        let newText = joinedWord;\n        setText(newText);\n        props.showAlert(\"Text Reversed\", \"success\");\n    }\n\n    const handleCopy = () => {\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        navigator.clipboard.writeText(text.value)\n        props.showAlert(\"Text Copied\", \"success\");\n    }\n\n    const[text , setText] = useState('');\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\n            <h1>{props.heading} </h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark'?'grey':'white' , color: props.mode === 'dark'?'white':'black' }} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick} >Convert to upper case</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick} >Convert to lower case</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick} >Clear Text</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleReverseClick} >Reverse Text</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy} >Copy Text</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\n            <h2>Your Text Summary</h2>\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\n            <p>It will take {0.008 * text.split(\" \").length} minutes to read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Enter something in the textbox above to Preview it here\"}</p>\n        </div>\n        </>\n    )\n}\n\n","import React from 'react'\n\nfunction Alert(props) {\n\n    const capitalize =(word) => {\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\n            \n        </div>\n    )\n}\n\nexport default Alert","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React,{useState} from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');// whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message , type) => {\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode =() => {\n    if( mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'rgb(3 20 62)';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title = 'TextUtils - Dark Mode';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  // const greenMode =() => {\n  //   if( mode === 'light'){\n  //     setMode('green');\n  //     document.body.style.backgroundColor = '#003615';\n  //     showAlert(\"Green mode has been enabled\",\"success\");\n  //   }\n  //   else{\n  //     setMode('light');\n  //     document.body.style.backgroundColor = 'white'\n  //     showAlert(\"Light mode has been enabled\",\"success\");\n  //   }\n  // }\n  \n  return (\n    <>  \n    {/* <Navbar title=\"Textutils\" aboutText=\"About Text\" /> */}\n    \n    {/* <Router> */}\n    <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert = {alert} />\n    <div className=\"container my-3\" >\n      {/* <Routes> */}\n        {/* <Route exact path=\"/\" element ={<TextForm showAlert= {showAlert} heading=\"Enter the text to analyze below\" mode = {mode} />}/> */}\n        <TextForm showAlert= {showAlert} heading=\"Enter the text to analyze below\" mode = {mode} />\n        {/* <Route exact path=\"/about\" element = {<About />}/> */}\n      {/* </Routes> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}